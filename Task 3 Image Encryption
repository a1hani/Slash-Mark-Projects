from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
import os

# Key generation function
def generate_key(password: str, salt: bytes):
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    return kdf.derive(password.encode())  # Derives a key from the password

# Encrypt image
def encrypt_image(file_path: str, password: str):
    with open(file_path, 'rb') as file:
        image_data = file.read()
    
    # Generate a random salt and initialization vector (IV)
    salt = os.urandom(16)
    iv = os.urandom(16)

    # Generate key using password and salt
    key = generate_key(password, salt)

    # Pad the image data to be AES block size (16 bytes) aligned
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(image_data) + padder.finalize()

    # AES encryption
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()

    # Write salt, IV, and encrypted data to file
    with open(file_path + '.enc', 'wb') as enc_file:
        enc_file.write(salt + iv + encrypted_data)

    print(f"Image encrypted and saved as {file_path}.enc")

# Decrypt image
def decrypt_image(file_path: str, password: str, output_path: str):
    with open(file_path, 'rb') as enc_file:
        encrypted_data = enc_file.read()

    # Extract salt, IV, and actual encrypted data
    salt = encrypted_data[:16]
    iv = encrypted_data[16:32]
    encrypted_image = encrypted_data[32:]

    # Generate the same key using the password and extracted salt
    key = generate_key(password, salt)

    # AES decryption
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()
    padded_image_data = decryptor.update(encrypted_image) + decryptor.finalize()

    # Unpad the decrypted data
    unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
    image_data = unpadder.update(padded_image_data) + unpadder.finalize()

    # Write the decrypted image back to an output file
    with open(output_path, 'wb') as dec_file:
        dec_file.write(image_data)

    print(f"Image decrypted and saved as {output_path}")

# Example usage:
# Encrypt
encrypt_image('cat_image.jpg', 'your_secure_password')

# Decrypt
decrypt_image('cat_image.jpg.enc', 'your_secure_password', 'decrypted_image.jpg')
