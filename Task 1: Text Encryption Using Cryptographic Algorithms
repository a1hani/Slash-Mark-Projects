import os
import base64
import hashlib
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding

# Encryption key must be 32 bytes for AES-256
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY', '12345678901234567890123456789012')  # Default to a fixed 32-character key for simplicity
ENCRYPTION_KEY = hashlib.sha256(ENCRYPTION_KEY.encode()).digest()  # Hash the key to make it exactly 32 bytes

IV_LENGTH = 16  # Initialization vector length for AES (128 bits / 16 bytes)

def encrypt(text):
    try:
        # Generate a random IV
        iv = os.urandom(IV_LENGTH)

        # Create cipher object using AES-256-CBC mode
        cipher = Cipher(algorithms.AES(ENCRYPTION_KEY), modes.CBC(iv), backend=default_backend())
        encryptor = cipher.encryptor()

        # Pad the text to be a multiple of block size (128 bits / 16 bytes)
        padder = padding.PKCS7(algorithms.AES.block_size).padder()
        padded_text = padder.update(text.encode()) + padder.finalize()

        # Perform encryption
        encrypted = encryptor.update(padded_text) + encryptor.finalize()

        # Encode both IV and encrypted text in base64 for easy transport/storage
        return base64.b64encode(iv + encrypted).decode('utf-8')

    except Exception as e:
        print(f"Encryption failed: {e}")
        return None

def decrypt(encrypted_text):
    try:
        # Decode the base64-encoded text
        encrypted_text = base64.b64decode(encrypted_text)

        # Extract IV and the encrypted message
        iv = encrypted_text[:IV_LENGTH]
        encrypted_message = encrypted_text[IV_LENGTH:]

        # Create cipher object for decryption
        cipher = Cipher(algorithms.AES(ENCRYPTION_KEY), modes.CBC(iv), backend=default_backend())
        decryptor = cipher.decryptor()

        # Perform decryption
        decrypted_padded = decryptor.update(encrypted_message) + decryptor.finalize()

        # Remove padding after decryption
        unpadder = padding.PKCS7(algorithms.AES.block_size).unpadder()
        decrypted = unpadder.update(decrypted_padded) + unpadder.finalize()

        return decrypted.decode('utf-8')

    except Exception as e:
        print(f"Decryption failed: {e}")
        return None

def main():
    while True:
        print("\n=== Text Encryption/Decryption ===")
        print("1. Encrypt Text")
        print("2. Decrypt Text")
        print("3. Exit")

        choice = input("Enter your choice (1/2/3): ")

        if choice == '1':
            text_to_encrypt = input("Enter the text to encrypt: ")
            encrypted_text = encrypt(text_to_encrypt)
            if encrypted_text:
                print(f"Encrypted Text: {encrypted_text}")
            else:
                print("Encryption failed!")

        elif choice == '2':
            text_to_decrypt = input("Enter the encrypted text to decrypt: ")
            decrypted_text = decrypt(text_to_decrypt)
            if decrypted_text:
                print(f"Decrypted Text: {decrypted_text}")
            else:
                print("Decryption failed!")

        elif choice == '3':
            print("Exiting...")
            break

        else:
            print("Invalid choice! Please select 1, 2, or 3.")

if __name__ == "__main__":
    main()
